
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003578  08003578  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000038  080035b8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080035b8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8fc  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b04  00000000  00000000  0002c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026890  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c38e  00000000  00000000  00056340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e66  00000000  00000000  000626ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003060  00000000  00000000  00156588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000038 	.word	0x20000038
 8000214:	00000000 	.word	0x00000000
 8000218:	08003548 	.word	0x08003548

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000003c 	.word	0x2000003c
 8000234:	08003548 	.word	0x08003548

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:
void CANInit();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan3) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef *rxheader = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
	uint8_t aData[8];
	HAL_CAN_GetRxMessage(hcan3, CAN_RX_FIFO0, rxheader, aData);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	2100      	movs	r1, #0
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f001 f84a 	bl	80015de <HAL_CAN_GetRxMessage>
		switch (rxheader->StdId) {
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f2a3 2383 	subw	r3, r3, #643	; 0x283
 8000552:	2b03      	cmp	r3, #3
 8000554:	d866      	bhi.n	8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	0800056d 	.word	0x0800056d
 8000560:	080005c9 	.word	0x080005c9
 8000564:	0800059b 	.word	0x0800059b
 8000568:	080005f7 	.word	0x080005f7
		case 0x283:
			inv1Message= 1;
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
 8000576:	e00c      	b.n	8000592 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
				inv1_av1_msg[i] = aData[i];
 8000578:	f107 020c 	add.w	r2, r7, #12
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	4413      	add	r3, r2
 8000580:	7819      	ldrb	r1, [r3, #0]
 8000582:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	4413      	add	r3, r2
 8000588:	460a      	mov	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	3301      	adds	r3, #1
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
 8000592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000594:	2b07      	cmp	r3, #7
 8000596:	ddef      	ble.n	8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			break;
 8000598:	e044      	b.n	8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
		case 0x285:
			inv1Message= 1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	e00c      	b.n	80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
				inv1_av2_msg[i] = aData[i];
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	4413      	add	r3, r2
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	4413      	add	r3, r2
 80005b6:	460a      	mov	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80005ba:	6a3b      	ldr	r3, [r7, #32]
 80005bc:	3301      	adds	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	ddef      	ble.n	80005a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
			break;
 80005c6:	e02d      	b.n	8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
		case 0x284:
			inv2Message= 1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
 80005d2:	e00c      	b.n	80005ee <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
				inv2_av1_msg[i] = aData[i];
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	4413      	add	r3, r2
 80005dc:	7819      	ldrb	r1, [r3, #0]
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	4413      	add	r3, r2
 80005e4:	460a      	mov	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61fb      	str	r3, [r7, #28]
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	ddef      	ble.n	80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
			break;
 80005f4:	e016      	b.n	8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
		case 0x286:
			inv2Message= 1;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	e00c      	b.n	800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
				inv2_av2_msg[i] = aData[i];
 8000602:	f107 020c 	add.w	r2, r7, #12
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	4413      	add	r3, r2
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	4413      	add	r3, r2
 8000612:	460a      	mov	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	3301      	adds	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	2b07      	cmp	r3, #7
 8000620:	ddef      	ble.n	8000602 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			break;
 8000622:	bf00      	nop
		}
}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000068 	.word	0x20000068
 8000630:	2000007c 	.word	0x2000007c
 8000634:	20000074 	.word	0x20000074
 8000638:	2000006c 	.word	0x2000006c
 800063c:	20000084 	.word	0x20000084
 8000640:	20000108 	.word	0x20000108

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fc65 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 fa2a 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fb1c 	bl	8000c8c <MX_GPIO_Init>
  MX_CAN3_Init();
 8000654:	f000 fa96 	bl	8000b84 <MX_CAN3_Init>
  MX_TIM3_Init();
 8000658:	f000 faca 	bl	8000bf0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	CANInit();
 800065c:	f000 f95e 	bl	800091c <CANInit>
	HAL_TIM_Base_Start_IT(&htim3);
 8000660:	4893      	ldr	r0, [pc, #588]	; (80008b0 <main+0x26c>)
 8000662:	f002 fad9 	bl	8002c18 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		switch (state) {
 8000666:	4b93      	ldr	r3, [pc, #588]	; (80008b4 <main+0x270>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b0a      	cmp	r3, #10
 800066c:	f200 80f7 	bhi.w	800085e <main+0x21a>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <main+0x34>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006a5 	.word	0x080006a5
 800067c:	08000755 	.word	0x08000755
 8000680:	08000777 	.word	0x08000777
 8000684:	0800078b 	.word	0x0800078b
 8000688:	080007b3 	.word	0x080007b3
 800068c:	080007db 	.word	0x080007db
 8000690:	080007e3 	.word	0x080007e3
 8000694:	08000807 	.word	0x08000807
 8000698:	0800082f 	.word	0x0800082f
 800069c:	0800085f 	.word	0x0800085f
 80006a0:	08000857 	.word	0x08000857
		case RESET_ERROR:
			// 0
			msg1[0] = 0;
 80006a4:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <main+0x274>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			msg1[1] = 0x08;
 80006aa:	4b83      	ldr	r3, [pc, #524]	; (80008b8 <main+0x274>)
 80006ac:	2208      	movs	r2, #8
 80006ae:	705a      	strb	r2, [r3, #1]
			msg1[2] = 0;
 80006b0:	4b81      	ldr	r3, [pc, #516]	; (80008b8 <main+0x274>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	709a      	strb	r2, [r3, #2]
			msg1[3] = 0;
 80006b6:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <main+0x274>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
			msg1[4] = 0;
 80006bc:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <main+0x274>)
 80006be:	2200      	movs	r2, #0
 80006c0:	711a      	strb	r2, [r3, #4]
			msg1[5] = 0;
 80006c2:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <main+0x274>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	715a      	strb	r2, [r3, #5]
			msg1[6] = 0;
 80006c8:	4b7b      	ldr	r3, [pc, #492]	; (80008b8 <main+0x274>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	719a      	strb	r2, [r3, #6]
			msg1[7] = 0;
 80006ce:	4b7a      	ldr	r3, [pc, #488]	; (80008b8 <main+0x274>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	71da      	strb	r2, [r3, #7]

			msg2[0] = 0;
 80006d4:	4b79      	ldr	r3, [pc, #484]	; (80008bc <main+0x278>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
			msg2[1] = 0x08;
 80006da:	4b78      	ldr	r3, [pc, #480]	; (80008bc <main+0x278>)
 80006dc:	2208      	movs	r2, #8
 80006de:	705a      	strb	r2, [r3, #1]
			msg2[2] = 0;
 80006e0:	4b76      	ldr	r3, [pc, #472]	; (80008bc <main+0x278>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	709a      	strb	r2, [r3, #2]
			msg2[3] = 0;
 80006e6:	4b75      	ldr	r3, [pc, #468]	; (80008bc <main+0x278>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	70da      	strb	r2, [r3, #3]
			msg2[4] = 0;
 80006ec:	4b73      	ldr	r3, [pc, #460]	; (80008bc <main+0x278>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	711a      	strb	r2, [r3, #4]
			msg2[5] = 0;
 80006f2:	4b72      	ldr	r3, [pc, #456]	; (80008bc <main+0x278>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	715a      	strb	r2, [r3, #5]
			msg2[6] = 0;
 80006f8:	4b70      	ldr	r3, [pc, #448]	; (80008bc <main+0x278>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	719a      	strb	r2, [r3, #6]
			msg2[7] = 0;
 80006fe:	4b6f      	ldr	r3, [pc, #444]	; (80008bc <main+0x278>)
 8000700:	2200      	movs	r2, #0
 8000702:	71da      	strb	r2, [r3, #7]

			currentsetpoint1 = 0;
 8000704:	4b6e      	ldr	r3, [pc, #440]	; (80008c0 <main+0x27c>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
			rpm1setpoint = 0;
 800070a:	4b6e      	ldr	r3, [pc, #440]	; (80008c4 <main+0x280>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]

			currentsetpoint2 = 0;
 8000710:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <main+0x284>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
			rpm2setpoint = 0;
 8000716:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <main+0x288>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]

			if ((inv1Message == 1 && (inv1_av1_msg[1] & 0x02) == 0)
 800071c:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <main+0x28c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	f040 809e 	bne.w	8000862 <main+0x21e>
 8000726:	4b6b      	ldr	r3, [pc, #428]	; (80008d4 <main+0x290>)
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8097 	bne.w	8000862 <main+0x21e>
			&& (inv2Message == 1 && (inv2_av1_msg[1] & 0x02) == 0))
 8000734:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <main+0x294>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	f040 8092 	bne.w	8000862 <main+0x21e>
 800073e:	4b67      	ldr	r3, [pc, #412]	; (80008dc <main+0x298>)
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	2b00      	cmp	r3, #0
 8000748:	f040 808b 	bne.w	8000862 <main+0x21e>
				state = WAIT_SYSTEM_READY;
 800074c:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <main+0x270>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
			break;
 8000752:	e086      	b.n	8000862 <main+0x21e>
		case WAIT_SYSTEM_READY:
			// 1
			if ((inv1_av1_msg[1] & STATUS_SYSTEM_READY)
 8000754:	4b5f      	ldr	r3, [pc, #380]	; (80008d4 <main+0x290>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8082 	beq.w	8000866 <main+0x222>
				&& (inv2_av1_msg[1] & STATUS_SYSTEM_READY))
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <main+0x298>)
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d07b      	beq.n	8000866 <main+0x222>
				state = SET_DC_ON;
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <main+0x270>)
 8000770:	2202      	movs	r2, #2
 8000772:	701a      	strb	r2, [r3, #0]
			break;
 8000774:	e077      	b.n	8000866 <main+0x222>
		case SET_DC_ON:
			// 2
			msg1[1] = CONTROL_DC_ON;
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <main+0x274>)
 8000778:	2202      	movs	r2, #2
 800077a:	705a      	strb	r2, [r3, #1]
			msg2[1] = CONTROL_DC_ON;
 800077c:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <main+0x278>)
 800077e:	2202      	movs	r2, #2
 8000780:	705a      	strb	r2, [r3, #1]
			state = WAIT_DC_ON;
 8000782:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <main+0x270>)
 8000784:	2203      	movs	r2, #3
 8000786:	701a      	strb	r2, [r3, #0]
			break;
 8000788:	e06e      	b.n	8000868 <main+0x224>
		case WAIT_DC_ON:
			// 3
			if ((inv1_av1_msg[1] & STATUS_DC_ON) && (inv2_av1_msg[1] & STATUS_DC_ON))
 800078a:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <main+0x290>)
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	2b00      	cmp	r3, #0
 8000794:	d009      	beq.n	80007aa <main+0x166>
 8000796:	4b51      	ldr	r3, [pc, #324]	; (80008dc <main+0x298>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <main+0x166>
				state = WAIT_QUIT_DC_ON;
 80007a2:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <main+0x270>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	701a      	strb	r2, [r3, #0]
			else
				state = SET_DC_ON;
			break;
 80007a8:	e05e      	b.n	8000868 <main+0x224>
				state = SET_DC_ON;
 80007aa:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <main+0x270>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
			break;
 80007b0:	e05a      	b.n	8000868 <main+0x224>
		case WAIT_QUIT_DC_ON:
			// 4
			if ((inv1_av1_msg[1] & STATUS_QUIT_DC_ON) && (inv2_av1_msg[1] & STATUS_QUIT_DC_ON))
 80007b2:	4b48      	ldr	r3, [pc, #288]	; (80008d4 <main+0x290>)
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d009      	beq.n	80007d2 <main+0x18e>
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <main+0x298>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <main+0x18e>
				state = RESET_POINTS;
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x270>)
 80007cc:	2205      	movs	r2, #5
 80007ce:	701a      	strb	r2, [r3, #0]
			else
				state = WAIT_DC_ON;
			break;
 80007d0:	e04a      	b.n	8000868 <main+0x224>
				state = WAIT_DC_ON;
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <main+0x270>)
 80007d4:	2203      	movs	r2, #3
 80007d6:	701a      	strb	r2, [r3, #0]
			break;
 80007d8:	e046      	b.n	8000868 <main+0x224>
		case RESET_POINTS:
			// 5
			state = SET_ENABLE_AND_INV_ON;
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <main+0x270>)
 80007dc:	2206      	movs	r2, #6
 80007de:	701a      	strb	r2, [r3, #0]
			break;
 80007e0:	e042      	b.n	8000868 <main+0x224>
		case SET_ENABLE_AND_INV_ON:
			// 6
			msg1[1] |= CONTROL_ENABLE | CONTROL_INVERTER_ON;
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <main+0x274>)
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	f043 0305 	orr.w	r3, r3, #5
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <main+0x274>)
 80007ee:	705a      	strb	r2, [r3, #1]
			msg2[1] |= CONTROL_ENABLE | CONTROL_INVERTER_ON;
 80007f0:	4b32      	ldr	r3, [pc, #200]	; (80008bc <main+0x278>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	f043 0305 	orr.w	r3, r3, #5
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <main+0x278>)
 80007fc:	705a      	strb	r2, [r3, #1]
			state = WAIT_INVERTER_ON;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <main+0x270>)
 8000800:	2207      	movs	r2, #7
 8000802:	701a      	strb	r2, [r3, #0]
			break;
 8000804:	e030      	b.n	8000868 <main+0x224>
		case WAIT_INVERTER_ON:
			// 7
			if ((inv1_av1_msg[1] & STATUS_INVERTER_ON) && (inv2_av1_msg[1] & STATUS_INVERTER_ON))
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <main+0x290>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	2b00      	cmp	r3, #0
 8000810:	d009      	beq.n	8000826 <main+0x1e2>
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <main+0x298>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <main+0x1e2>
				state = WAIT_QUIT_INVERTER_ON;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <main+0x270>)
 8000820:	2208      	movs	r2, #8
 8000822:	701a      	strb	r2, [r3, #0]
			else
				state = SET_ENABLE_AND_INV_ON;
			break;
 8000824:	e020      	b.n	8000868 <main+0x224>
				state = SET_ENABLE_AND_INV_ON;
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <main+0x270>)
 8000828:	2206      	movs	r2, #6
 800082a:	701a      	strb	r2, [r3, #0]
			break;
 800082c:	e01c      	b.n	8000868 <main+0x224>
		case WAIT_QUIT_INVERTER_ON:
			// 8
			if ((inv1_av1_msg[1] & STATUS_QUIT_INVERTER_ON) && (inv2_av1_msg[1] & STATUS_QUIT_INVERTER_ON))
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <main+0x290>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <main+0x20a>
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <main+0x298>)
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <main+0x20a>
				state = SET_POINTS;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <main+0x270>)
 8000848:	2209      	movs	r2, #9
 800084a:	701a      	strb	r2, [r3, #0]
			else
				state = WAIT_INVERTER_ON;
			break;
 800084c:	e00c      	b.n	8000868 <main+0x224>
				state = WAIT_INVERTER_ON;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <main+0x270>)
 8000850:	2207      	movs	r2, #7
 8000852:	701a      	strb	r2, [r3, #0]
			break;
 8000854:	e008      	b.n	8000868 <main+0x224>
			// 9

			break;
		case INV_ERROR:
			// 10
			state = RESET_ERROR;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <main+0x270>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			break;
 800085c:	e004      	b.n	8000868 <main+0x224>
		default:
			break;
 800085e:	bf00      	nop
 8000860:	e002      	b.n	8000868 <main+0x224>
			break;
 8000862:	bf00      	nop
 8000864:	e000      	b.n	8000868 <main+0x224>
			break;
 8000866:	bf00      	nop
		}

		if ((inv1_av1_msg[1] & STATUS_ERROR && state != RESET_ERROR
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <main+0x290>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d007      	beq.n	8000884 <main+0x240>
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <main+0x270>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <main+0x240>
				&& state != SET_POINTS) ||
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <main+0x270>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b09      	cmp	r3, #9
 8000882:	d110      	bne.n	80008a6 <main+0x262>
				(inv2_av1_msg[1] & STATUS_ERROR && state != RESET_ERROR
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <main+0x298>)
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	f003 0302 	and.w	r3, r3, #2
				&& state != SET_POINTS) ||
 800088c:	2b00      	cmp	r3, #0
 800088e:	f43f aeea 	beq.w	8000666 <main+0x22>
				(inv2_av1_msg[1] & STATUS_ERROR && state != RESET_ERROR
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <main+0x270>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f43f aee5 	beq.w	8000666 <main+0x22>
						&& state != SET_POINTS)) {
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <main+0x270>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b09      	cmp	r3, #9
 80008a2:	f43f aee0 	beq.w	8000666 <main+0x22>
			state = INV_ERROR;
 80008a6:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <main+0x270>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	701a      	strb	r2, [r3, #0]
		switch (state) {
 80008ac:	e6db      	b.n	8000666 <main+0x22>
 80008ae:	bf00      	nop
 80008b0:	20000094 	.word	0x20000094
 80008b4:	20000070 	.word	0x20000070
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	20000110 	.word	0x20000110
 80008c0:	2000005c 	.word	0x2000005c
 80008c4:	20000058 	.word	0x20000058
 80008c8:	20000064 	.word	0x20000064
 80008cc:	20000060 	.word	0x20000060
 80008d0:	20000068 	.word	0x20000068
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	2000006c 	.word	0x2000006c
 80008dc:	20000084 	.word	0x20000084

080008e0 <sendCANMessage>:
	}
    /* USER CODE END WHILE */
}
    /* USER CODE BEGIN 3 */
void sendCANMessage(uint8_t data[], uint16_t id)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
	CAN_TxHeaderTypeDef pHeader;
		pHeader.DLC = 8;
 80008ec:	2308      	movs	r3, #8
 80008ee:	61bb      	str	r3, [r7, #24]
		pHeader.RTR = CAN_RTR_DATA;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
		pHeader.IDE = CAN_ID_STD;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
		pHeader.StdId = id;
 80008f8:	887b      	ldrh	r3, [r7, #2]
 80008fa:	60bb      	str	r3, [r7, #8]
		HAL_CAN_AddTxMessage(&hcan3, &pHeader, data, &TxMailbox);
 80008fc:	f107 0108 	add.w	r1, r7, #8
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <sendCANMessage+0x34>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <sendCANMessage+0x38>)
 8000906:	f000 fd8f 	bl	8001428 <HAL_CAN_AddTxMessage>

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000118 	.word	0x20000118
 8000918:	200000e0 	.word	0x200000e0

0800091c <CANInit>:
void CANInit()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 13;
 8000936:	230d      	movs	r3, #13
 8000938:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan3, &CanFilter);
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <CANInit+0x4c>)
 800094c:	f000 fc3c 	bl	80011c8 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000950:	2102      	movs	r1, #2
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <CANInit+0x4c>)
 8000954:	f000 ff55 	bl	8001802 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan3);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <CANInit+0x4c>)
 800095a:	f000 fd21 	bl	80013a0 <HAL_CAN_Start>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000e0 	.word	0x200000e0

0800096c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(state == SET_POINTS) {
 8000974:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b09      	cmp	r3, #9
 800097a:	d16d      	bne.n	8000a58 <HAL_TIM_PeriodElapsedCallback+0xec>
#ifdef HARDCODED_CYCLING_SETPOINT_VALUES
			rpm1setpoint = rpmsetpoint[rpmIndex];
 800097c:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000986:	4a3f      	ldr	r2, [pc, #252]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000988:	6013      	str	r3, [r2, #0]
#endif

			if (currentsetpoint1 < rpm1setpoint) {
 800098a:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	da05      	bge.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x36>
				currentsetpoint1 += 5;
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3305      	adds	r3, #5
 800099c:	4a3a      	ldr	r2, [pc, #232]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e025      	b.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x82>
			} else if (currentsetpoint1 > rpm1setpoint) {
 80009a2:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dd05      	ble.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x4e>
				currentsetpoint1 -= 5;
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b05      	subs	r3, #5
 80009b4:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e019      	b.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x82>
			} else if (currentsetpoint1 == rpm1setpoint) {
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d113      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x82>
				currentsetpoint1 = rpm1setpoint;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009cc:	6013      	str	r3, [r2, #0]
#ifdef HARDCODED_CYCLING_SETPOINT_VALUES
				rpmIndex = (rpmIndex + 1) % 10;
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80009d6:	fb83 2301 	smull	r2, r3, r3, r1
 80009da:	109a      	asrs	r2, r3, #2
 80009dc:	17cb      	asrs	r3, r1, #31
 80009de:	1ad2      	subs	r2, r2, r3
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1aca      	subs	r2, r1, r3
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009ec:	601a      	str	r2, [r3, #0]
#endif
			}

			currentsetpoint1 = 20;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009f0:	2214      	movs	r2, #20
 80009f2:	601a      	str	r2, [r3, #0]

			msg1[2] = currentsetpoint1 & 0xFF;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009fc:	709a      	strb	r2, [r3, #2]
			msg1[3] = (currentsetpoint1 & 0xFF00) >> 8;
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	121b      	asrs	r3, r3, #8
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a08:	70da      	strb	r2, [r3, #3]

			msg1[4] = 1000 & 0xFF;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a0c:	22e8      	movs	r2, #232	; 0xe8
 8000a0e:	711a      	strb	r2, [r3, #4]
			msg1[5] = (1000 & 0xFF00) >> 8;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	715a      	strb	r2, [r3, #5]

			msg1[6] = -1000 & 0xFF;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a18:	2218      	movs	r2, #24
 8000a1a:	719a      	strb	r2, [r3, #6]
			msg1[7] = (-1000 & 0xFF00) >> 8;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a1e:	22fc      	movs	r2, #252	; 0xfc
 8000a20:	71da      	strb	r2, [r3, #7]

			currentsetpoint2 = 300;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a28:	601a      	str	r2, [r3, #0]

			msg2[2] = currentsetpoint2 & 0xFF;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a32:	709a      	strb	r2, [r3, #2]
			msg2[3] = (currentsetpoint2 & 0xFF00) >> 8;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	121b      	asrs	r3, r3, #8
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a3e:	70da      	strb	r2, [r3, #3]

			msg2[4] = 1000 & 0xFF;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a42:	22e8      	movs	r2, #232	; 0xe8
 8000a44:	711a      	strb	r2, [r3, #4]
			msg2[5] = (1000 & 0xFF00) >> 8;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	715a      	strb	r2, [r3, #5]

			msg2[6] = -1000 & 0xFF;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a4e:	2218      	movs	r2, #24
 8000a50:	719a      	strb	r2, [r3, #6]
			msg2[7] = (-1000 & 0xFF00) >> 8;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a54:	22fc      	movs	r2, #252	; 0xfc
 8000a56:	71da      	strb	r2, [r3, #7]
	}
	sendCANMessage(msg1, id1);
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a60:	f7ff ff3e 	bl	80008e0 <sendCANMessage>
	sendCANMessage(msg2, id2);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a6c:	f7ff ff38 	bl	80008e0 <sendCANMessage>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000070 	.word	0x20000070
 8000a7c:	20000054 	.word	0x20000054
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000058 	.word	0x20000058
 8000a88:	2000005c 	.word	0x2000005c
 8000a8c:	66666667 	.word	0x66666667
 8000a90:	2000008c 	.word	0x2000008c
 8000a94:	20000064 	.word	0x20000064
 8000a98:	20000110 	.word	0x20000110
 8000a9c:	20000028 	.word	0x20000028
 8000aa0:	2000002a 	.word	0x2000002a

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	; 0x50
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2234      	movs	r2, #52	; 0x34
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fd40 	bl	8003538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemClock_Config+0xd8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a2b      	ldr	r2, [pc, #172]	; (8000b7c <SystemClock_Config+0xd8>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemClock_Config+0xd8>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <SystemClock_Config+0xdc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae8:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <SystemClock_Config+0xdc>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemClock_Config+0xdc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b10:	2308      	movs	r3, #8
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b14:	23d8      	movs	r3, #216	; 0xd8
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fbcd 	bl	80022c8 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b34:	f000 f8c2 	bl	8000cbc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b38:	f001 fb76 	bl	8002228 <HAL_PWREx_EnableOverDrive>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b42:	f000 f8bb 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2103      	movs	r1, #3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fe5e 	bl	8002824 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b6e:	f000 f8a5 	bl	8000cbc <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_CAN3_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000b90:	2206      	movs	r2, #6
 8000b92:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000ba2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ba6:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000baa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bae:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_CAN3_Init+0x64>)
 8000bd6:	f000 f9fb 	bl	8000fd0 <HAL_CAN_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000be0:	f000 f86c 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000e0 	.word	0x200000e0
 8000bec:	40003400 	.word	0x40003400

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <MX_TIM3_Init+0x98>)
 8000c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c16:	226c      	movs	r2, #108	; 0x6c
 8000c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c22:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c36:	f001 ff97 	bl	8002b68 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c40:	f000 f83c 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c52:	f002 f979 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c5c:	f000 f82e 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM3_Init+0x94>)
 8000c6e:	f002 fb93 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 f820 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000094 	.word	0x20000094
 8000c88:	40000400 	.word	0x40000400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <HAL_CAN_MspInit+0xbc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d147      	bne.n	8000dc2 <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_CAN_MspInit+0xc0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PB3     ------> CAN3_RX
    PB4     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d92:	2318      	movs	r3, #24
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000da2:	230b      	movs	r3, #11
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <HAL_CAN_MspInit+0xc4>)
 8000dae:	f001 f88f 	bl	8001ed0 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2069      	movs	r0, #105	; 0x69
 8000db8:	f001 f853 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8000dbc:	2069      	movs	r0, #105	; 0x69
 8000dbe:	f001 f86c 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40003400 	.word	0x40003400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_TIM_Base_MspInit+0x44>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d113      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_TIM_Base_MspInit+0x48>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_TIM_Base_MspInit+0x48>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_TIM_Base_MspInit+0x48>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	201d      	movs	r0, #29
 8000e08:	f001 f82b 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e0c:	201d      	movs	r0, #29
 8000e0e:	f001 f844 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40000400 	.word	0x40000400
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f88e 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM3_IRQHandler+0x10>)
 8000e7e:	f001 ff43 	bl	8002d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000094 	.word	0x20000094

08000e8c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <CAN3_RX0_IRQHandler+0x10>)
 8000e92:	f000 fcdc 	bl	800184e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000e0 	.word	0x200000e0

08000ea0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 fafd 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fba5 	bl	8000644 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000f08:	08003580 	.word	0x08003580
  ldr r2, =_sbss
 8000f0c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000f10:	20000120 	.word	0x20000120

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>

08000f16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 ff96 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f20:	200f      	movs	r0, #15
 8000f22:	f000 f805 	bl	8000f30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f26:	f7ff fecf 	bl	8000cc8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 ffb1 	bl	8001eb6 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 ff79 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000002c 	.word	0x2000002c
 8000f88:	20000034 	.word	0x20000034
 8000f8c:	20000030 	.word	0x20000030

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	2000011c 	.word	0x2000011c

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000011c 	.word	0x2000011c

08000fd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0ed      	b.n	80011be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe8e 	bl	8000d10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0202 	bic.w	r2, r2, #2
 8001002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001004:	f7ff ffd8 	bl	8000fb8 <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800100a:	e012      	b.n	8001032 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800100c:	f7ff ffd4 	bl	8000fb8 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b0a      	cmp	r3, #10
 8001018:	d90b      	bls.n	8001032 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2205      	movs	r2, #5
 800102a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0c5      	b.n	80011be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e5      	bne.n	800100c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff ffb2 	bl	8000fb8 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff ffae 	bl	8000fb8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e09f      	b.n	80011be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0e5      	beq.n	8001058 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e1b      	ldrb	r3, [r3, #24]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7e5b      	ldrb	r3, [r3, #25]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e007      	b.n	80010e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e9b      	ldrb	r3, [r3, #26]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d108      	bne.n	80010fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e007      	b.n	800110a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0220 	bic.w	r2, r2, #32
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7edb      	ldrb	r3, [r3, #27]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0210 	bic.w	r2, r2, #16
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0210 	orr.w	r2, r2, #16
 8001132:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7f1b      	ldrb	r3, [r3, #28]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0208 	orr.w	r2, r2, #8
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0208 	bic.w	r2, r2, #8
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7f5b      	ldrb	r3, [r3, #29]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0204 	orr.w	r2, r2, #4
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	ea42 0103 	orr.w	r1, r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d003      	beq.n	80011ee <HAL_CAN_ConfigFilter+0x26>
 80011e6:	7cfb      	ldrb	r3, [r7, #19]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	f040 80c7 	bne.w	800137c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a69      	ldr	r2, [pc, #420]	; (8001398 <HAL_CAN_ConfigFilter+0x1d0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d001      	beq.n	80011fc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_CAN_ConfigFilter+0x1d4>)
 80011fa:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_CAN_ConfigFilter+0x1d4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d111      	bne.n	8001238 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800121a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	2201      	movs	r2, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d123      	bne.n	80012aa <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	401a      	ands	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001284:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3248      	adds	r2, #72	; 0x48
 800128a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a0:	6979      	ldr	r1, [r7, #20]
 80012a2:	3348      	adds	r3, #72	; 0x48
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d122      	bne.n	80012f8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3248      	adds	r2, #72	; 0x48
 80012d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ee:	6979      	ldr	r1, [r7, #20]
 80012f0:	3348      	adds	r3, #72	; 0x48
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001312:	e007      	b.n	8001324 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d109      	bne.n	8001340 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800133e:	e007      	b.n	8001350 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	431a      	orrs	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800136e:	f023 0201 	bic.w	r2, r3, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e006      	b.n	800138a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40003400 	.word	0x40003400
 800139c:	40006400 	.word	0x40006400

080013a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12e      	bne.n	8001412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fdf4 	bl	8000fb8 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d2:	e012      	b.n	80013fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d4:	f7ff fdf0 	bl	8000fb8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e012      	b.n	8001420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e5      	bne.n	80013d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <HAL_CAN_AddTxMessage+0x2c>
 800144c:	7ffb      	ldrb	r3, [r7, #31]
 800144e:	2b02      	cmp	r3, #2
 8001450:	f040 80b8 	bne.w	80015c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10a      	bne.n	8001474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80a0 	beq.w	80015b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	0e1b      	lsrs	r3, r3, #24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d907      	bls.n	8001494 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e09e      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001494:	2201      	movs	r2, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	409a      	lsls	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	6809      	ldr	r1, [r1, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e00f      	b.n	80014e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6819      	ldr	r1, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3318      	adds	r3, #24
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3304      	adds	r3, #4
 80014f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	7d1b      	ldrb	r3, [r3, #20]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d111      	bne.n	8001522 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3318      	adds	r3, #24
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	6811      	ldr	r1, [r2, #0]
 8001512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3318      	adds	r3, #24
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	3304      	adds	r3, #4
 8001520:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3307      	adds	r3, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	061a      	lsls	r2, r3, #24
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3306      	adds	r3, #6
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3305      	adds	r3, #5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	4313      	orrs	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	3204      	adds	r2, #4
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6811      	ldr	r1, [r2, #0]
 800154a:	ea43 0200 	orr.w	r2, r3, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001558:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3303      	adds	r3, #3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3302      	adds	r3, #2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3301      	adds	r3, #1
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4313      	orrs	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4610      	mov	r0, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	6811      	ldr	r1, [r2, #0]
 8001580:	ea43 0200 	orr.w	r2, r3, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	440b      	add	r3, r1
 800158a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800158e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3318      	adds	r3, #24
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3318      	adds	r3, #24
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	440b      	add	r3, r1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e00e      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e006      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015de:	b480      	push	{r7}
 80015e0:	b087      	sub	sp, #28
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <HAL_CAN_GetRxMessage+0x24>
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	f040 80f3 	bne.w	80017e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10e      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0e7      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d8      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	331b      	adds	r3, #27
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0204 	and.w	r2, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	331b      	adds	r3, #27
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0d5b      	lsrs	r3, r3, #21
 8001672:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e00b      	b.n	8001694 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	331b      	adds	r3, #27
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	331b      	adds	r3, #27
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0202 	and.w	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	331b      	adds	r3, #27
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 020f 	and.w	r2, r3, #15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	331b      	adds	r3, #27
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	331b      	adds	r3, #27
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0a1a      	lsrs	r2, r3, #8
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0c1a      	lsrs	r2, r3, #16
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3302      	adds	r3, #2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0e1a      	lsrs	r2, r3, #24
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3303      	adds	r3, #3
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3305      	adds	r3, #5
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3306      	adds	r3, #6
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0e1a      	lsrs	r2, r3, #24
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3307      	adds	r3, #7
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0220 	orr.w	r2, r2, #32
 80017e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e006      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <HAL_CAN_ActivateNotification+0x1e>
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d109      	bne.n	8001834 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e006      	b.n	8001842 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b08a      	sub	sp, #40	; 0x28
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d07c      	beq.n	800198e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f983 	bl	8001bbc <HAL_CAN_TxMailbox0CompleteCallback>
 80018b6:	e016      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e00c      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e002      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f989 	bl	8001bf8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d024      	beq.n	800193a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f963 	bl	8001bd0 <HAL_CAN_TxMailbox1CompleteCallback>
 800190a:	e016      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e00c      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e002      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f969 	bl	8001c0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d024      	beq.n	800198e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800194c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f943 	bl	8001be4 <HAL_CAN_TxMailbox2CompleteCallback>
 800195e:	e016      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e00c      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e002      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f949 	bl	8001c20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00c      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2210      	movs	r2, #16
 80019b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2208      	movs	r2, #8
 80019cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f930 	bl	8001c34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fd9f 	bl	8000530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f912 	bl	8001c5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8f9 	bl	8001c48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8fc 	bl	8001c70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2208      	movs	r2, #8
 8001a92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8f5 	bl	8001c84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d07b      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d072      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03e      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1c:	2b60      	cmp	r3, #96	; 0x60
 8001b1e:	d02b      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x32a>
 8001b20:	2b60      	cmp	r3, #96	; 0x60
 8001b22:	d82e      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b24:	2b50      	cmp	r3, #80	; 0x50
 8001b26:	d022      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x320>
 8001b28:	2b50      	cmp	r3, #80	; 0x50
 8001b2a:	d82a      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d019      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x316>
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d826      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b34:	2b30      	cmp	r3, #48	; 0x30
 8001b36:	d010      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x30c>
 8001b38:	2b30      	cmp	r3, #48	; 0x30
 8001b3a:	d822      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d002      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x2f8>
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d005      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b44:	e01d      	b.n	8001b82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b4e:	e019      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b58:	e014      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b62:	e00f      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b6c:	e00a      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b76:	e005      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b80:	e000      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f872 	bl	8001c98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e175      	b.n	80021dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8164 	bne.w	80021d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00b      	beq.n	8001f2e <HAL_GPIO_Init+0x5e>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d130      	bne.n	8001f90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0201 	and.w	r2, r3, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x100>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80be 	beq.w	80021d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_GPIO_Init+0x324>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <HAL_GPIO_Init+0x328>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d037      	beq.n	800210e <HAL_GPIO_Init+0x23e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_GPIO_Init+0x23a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_GPIO_Init+0x334>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x236>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a55      	ldr	r2, [pc, #340]	; (8002208 <HAL_GPIO_Init+0x338>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x232>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_GPIO_Init+0x33c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x22e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a53      	ldr	r2, [pc, #332]	; (8002210 <HAL_GPIO_Init+0x340>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x22a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_GPIO_Init+0x344>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x226>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a51      	ldr	r2, [pc, #324]	; (8002218 <HAL_GPIO_Init+0x348>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x222>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_GPIO_Init+0x34c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x21e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x350>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x21a>
 80020e6:	2309      	movs	r3, #9
 80020e8:	e012      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ea:	230a      	movs	r3, #10
 80020ec:	e010      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00e      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x328>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_GPIO_Init+0x354>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <HAL_GPIO_Init+0x354>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae86 	bls.w	8001ef0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40021c00 	.word	0x40021c00
 800221c:	40022000 	.word	0x40022000
 8002220:	40022400 	.word	0x40022400
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002256:	f7fe feaf 	bl	8000fb8 <HAL_GetTick>
 800225a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800225c:	e009      	b.n	8002272 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800225e:	f7fe feab 	bl	8000fb8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226c:	d901      	bls.n	8002272 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e022      	b.n	80022b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d1ee      	bne.n	800225e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800228c:	f7fe fe94 	bl	8000fb8 <HAL_GetTick>
 8002290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002292:	e009      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002294:	f7fe fe90 	bl	8000fb8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a2:	d901      	bls.n	80022a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e007      	b.n	80022b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022b4:	d1ee      	bne.n	8002294 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e29b      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8087 	beq.w	80023fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f8:	4b93      	ldr	r3, [pc, #588]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d112      	bne.n	800232a <HAL_RCC_OscConfig+0x62>
 8002304:	4b90      	ldr	r3, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x130>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d168      	bne.n	80023f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e275      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x7a>
 8002334:	4b84      	ldr	r3, [pc, #528]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a83      	ldr	r2, [pc, #524]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e02e      	b.n	80023a0 <HAL_RCC_OscConfig+0xd8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x9c>
 800234a:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7e      	ldr	r2, [pc, #504]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7b      	ldr	r2, [pc, #492]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800235c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xd8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0xc0>
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a75      	ldr	r2, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a72      	ldr	r2, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xd8>
 8002388:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6b      	ldr	r2, [pc, #428]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe06 	bl	8000fb8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe fe02 	bl	8000fb8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e229      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b61      	ldr	r3, [pc, #388]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xe8>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fdf2 	bl	8000fb8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fdee 	bl	8000fb8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e215      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x110>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d069      	beq.n	80024da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002406:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x190>
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x17a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1e9      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	493d      	ldr	r1, [pc, #244]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e040      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fda4 	bl	8000fb8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fda0 	bl	8000fb8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1c7      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
 80024a6:	e018      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fd80 	bl	8000fb8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fd7c 	bl	8000fb8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1a3      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d038      	beq.n	8002558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fd5d 	bl	8000fb8 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe fd59 	bl	8000fb8 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e180      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x23a>
 8002520:	e01a      	b.n	8002558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_RCC_OscConfig+0x280>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe fd43 	bl	8000fb8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe fd3f 	bl	8000fb8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d903      	bls.n	800254c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e166      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
 8002548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a4 	beq.w	80026ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b8c      	ldr	r3, [pc, #560]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a88      	ldr	r2, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258e:	4b83      	ldr	r3, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x4d4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800259a:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x4d4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7f      	ldr	r2, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x4d4>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fd07 	bl	8000fb8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7fe fd03 	bl	8000fb8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e12a      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c0:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCC_OscConfig+0x4d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x31a>
 80025d4:	4b70      	ldr	r3, [pc, #448]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a6f      	ldr	r2, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	e02d      	b.n	800263e <HAL_RCC_OscConfig+0x376>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x33c>
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a6a      	ldr	r2, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a67      	ldr	r2, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	e01c      	b.n	800263e <HAL_RCC_OscConfig+0x376>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x35e>
 800260c:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a61      	ldr	r2, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a5e      	ldr	r2, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x376>
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a5b      	ldr	r2, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fcb7 	bl	8000fb8 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fcb3 	bl	8000fb8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0d8      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCC_OscConfig+0x386>
 8002670:	e014      	b.n	800269c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002672:	f7fe fca1 	bl	8000fb8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fc9d 	bl	8000fb8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0c2      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80ae 	beq.w	8002814 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d06d      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d14b      	bne.n	8002764 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a31      	ldr	r2, [pc, #196]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fc6e 	bl	8000fb8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fc6a 	bl	8000fb8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e091      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	071b      	lsls	r3, r3, #28
 800272a:	491b      	ldr	r1, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fc3c 	bl	8000fb8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe fc38 	bl	8000fb8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e05f      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x47c>
 8002762:	e057      	b.n	8002814 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800276a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fc22 	bl	8000fb8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fc1e 	bl	8000fb8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e045      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_OscConfig+0x4d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x4b0>
 8002796:	e03d      	b.n	8002814 <HAL_RCC_OscConfig+0x54c>
 8002798:	40023800 	.word	0x40023800
 800279c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_RCC_OscConfig+0x558>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d129      	bne.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d122      	bne.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	d119      	bne.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10f      	bne.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0d0      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d910      	bls.n	800286c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	4965      	ldr	r1, [pc, #404]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0b8      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d040      	beq.n	8002948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d115      	bne.n	8002906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e073      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06b      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4936      	ldr	r1, [pc, #216]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002918:	f7fe fb4e 	bl	8000fb8 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fb4a 	bl	8000fb8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e053      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d210      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020f 	bic.w	r2, r3, #15
 800295e:	4922      	ldr	r1, [pc, #136]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e032      	b.n	80029de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029b6:	f000 f821 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1cc>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1d0>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1d4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe faaa 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08003560 	.word	0x08003560
 80029f4:	2000002c 	.word	0x2000002c
 80029f8:	20000030 	.word	0x20000030

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a02:	2100      	movs	r1, #0
 8002a04:	6079      	str	r1, [r7, #4]
 8002a06:	2100      	movs	r1, #0
 8002a08:	60f9      	str	r1, [r7, #12]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a0e:	2100      	movs	r1, #0
 8002a10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a12:	4952      	ldr	r1, [pc, #328]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a14:	6889      	ldr	r1, [r1, #8]
 8002a16:	f001 010c 	and.w	r1, r1, #12
 8002a1a:	2908      	cmp	r1, #8
 8002a1c:	d00d      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x3e>
 8002a1e:	2908      	cmp	r1, #8
 8002a20:	f200 8094 	bhi.w	8002b4c <HAL_RCC_GetSysClockFreq+0x150>
 8002a24:	2900      	cmp	r1, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x32>
 8002a28:	2904      	cmp	r1, #4
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x38>
 8002a2c:	e08e      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2e:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a30:	60bb      	str	r3, [r7, #8]
      break;
 8002a32:	e08e      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a36:	60bb      	str	r3, [r7, #8]
      break;
 8002a38:	e08b      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3a:	4948      	ldr	r1, [pc, #288]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a3c:	6849      	ldr	r1, [r1, #4]
 8002a3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a42:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a44:	4945      	ldr	r1, [pc, #276]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a46:	6849      	ldr	r1, [r1, #4]
 8002a48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d024      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a50:	4942      	ldr	r1, [pc, #264]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a52:	6849      	ldr	r1, [r1, #4]
 8002a54:	0989      	lsrs	r1, r1, #6
 8002a56:	4608      	mov	r0, r1
 8002a58:	f04f 0100 	mov.w	r1, #0
 8002a5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a60:	f04f 0500 	mov.w	r5, #0
 8002a64:	ea00 0204 	and.w	r2, r0, r4
 8002a68:	ea01 0305 	and.w	r3, r1, r5
 8002a6c:	493d      	ldr	r1, [pc, #244]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a6e:	fb01 f003 	mul.w	r0, r1, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	fb01 f102 	mul.w	r1, r1, r2
 8002a78:	1844      	adds	r4, r0, r1
 8002a7a:	493a      	ldr	r1, [pc, #232]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a7c:	fba2 0101 	umull	r0, r1, r2, r1
 8002a80:	1863      	adds	r3, r4, r1
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	f7fd fbd4 	bl	8000238 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e04a      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	ea02 0400 	and.w	r4, r2, r0
 8002ab2:	ea03 0501 	and.w	r5, r3, r1
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	014b      	lsls	r3, r1, #5
 8002ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac8:	0142      	lsls	r2, r0, #5
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	1b00      	subs	r0, r0, r4
 8002ad0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	018b      	lsls	r3, r1, #6
 8002ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ae2:	0182      	lsls	r2, r0, #6
 8002ae4:	1a12      	subs	r2, r2, r0
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	00d9      	lsls	r1, r3, #3
 8002af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af8:	00d0      	lsls	r0, r2, #3
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	1912      	adds	r2, r2, r4
 8002b00:	eb45 0303 	adc.w	r3, r5, r3
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	0299      	lsls	r1, r3, #10
 8002b0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b12:	0290      	lsls	r0, r2, #10
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f7fd fb88 	bl	8000238 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	60bb      	str	r3, [r7, #8]
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b4e:	60bb      	str	r3, [r7, #8]
      break;
 8002b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b52:	68bb      	ldr	r3, [r7, #8]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	017d7840 	.word	0x017d7840

08002b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e049      	b.n	8002c0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe f922 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fabc 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d001      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e054      	b.n	8002cda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d022      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d01d      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_TIM_Base_Start_IT+0xd4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d018      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d009      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_TIM_Base_Start_IT+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x80>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d115      	bne.n	8002cc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_TIM_Base_Start_IT+0xec>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d015      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0xbe>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d011      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	e008      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e000      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40000800 	.word	0x40000800
 8002cf4:	40000c00 	.word	0x40000c00
 8002cf8:	40010400 	.word	0x40010400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40001800 	.word	0x40001800
 8002d04:	00010007 	.word	0x00010007

08002d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9cc 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9be 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9cf 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0204 	mvn.w	r2, #4
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9a2 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f994 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9a5 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0208 	mvn.w	r2, #8
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f978 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f96a 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f97b 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2208      	movs	r2, #8
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f94e 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f940 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f951 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fd70 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fb08 	bl	80034c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d107      	bne.n	8002ee6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fafb 	bl	80034dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d10e      	bne.n	8002f12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d107      	bne.n	8002f12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8ff 	bl	8003110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d10e      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d107      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f06f 0220 	mvn.w	r2, #32
 8002f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fabb 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_ConfigClockSource+0x18>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0b3      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x180>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_TIM_ConfigClockSource+0x188>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f98:	d03e      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0xd0>
 8002f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9e:	f200 8087 	bhi.w	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	f000 8085 	beq.w	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d87f      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb0:	2b70      	cmp	r3, #112	; 0x70
 8002fb2:	d01a      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0xa2>
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d87b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d050      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x116>
 8002fbc:	2b60      	cmp	r3, #96	; 0x60
 8002fbe:	d877      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc0:	2b50      	cmp	r3, #80	; 0x50
 8002fc2:	d03c      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xf6>
 8002fc4:	2b50      	cmp	r3, #80	; 0x50
 8002fc6:	d873      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d058      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x136>
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d86f      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b30      	cmp	r3, #48	; 0x30
 8002fd2:	d064      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	d86b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d060      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d867      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05c      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d05a      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fe8:	e062      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f000 f9ad 	bl	8003358 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800300c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]
      break;
 8003016:	e04e      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f000 f996 	bl	8003358 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e03b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	461a      	mov	r2, r3
 800304c:	f000 f90a 	bl	8003264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2150      	movs	r1, #80	; 0x50
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f963 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 800305c:	e02b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	461a      	mov	r2, r3
 800306c:	f000 f929 	bl	80032c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2160      	movs	r1, #96	; 0x60
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f953 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 800307c:	e01b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f000 f8ea 	bl	8003264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f943 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 800309c:	e00b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f000 f93a 	bl	8003322 <TIM_ITRx_SetConfig>
        break;
 80030ae:	e002      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	fffeff88 	.word	0xfffeff88

080030d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <TIM_Base_SetConfig+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d00f      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <TIM_Base_SetConfig+0x118>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <TIM_Base_SetConfig+0x120>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <TIM_Base_SetConfig+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d027      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <TIM_Base_SetConfig+0x118>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d023      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <TIM_Base_SetConfig+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <TIM_Base_SetConfig+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a28      	ldr	r2, [pc, #160]	; (800324c <TIM_Base_SetConfig+0x128>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <TIM_Base_SetConfig+0x130>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_Base_SetConfig+0x134>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <TIM_Base_SetConfig+0x138>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a23      	ldr	r2, [pc, #140]	; (8003260 <TIM_Base_SetConfig+0x13c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	40001800 	.word	0x40001800
 800325c:	40001c00 	.word	0x40001c00
 8003260:	40002000 	.word	0x40002000

08003264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 030a 	bic.w	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b087      	sub	sp, #28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0210 	bic.w	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	031b      	lsls	r3, r3, #12
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 0307 	orr.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	431a      	orrs	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e06d      	b.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2f      	ldr	r2, [pc, #188]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d108      	bne.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d01d      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a16      	ldr	r2, [pc, #88]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10c      	bne.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4313      	orrs	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40010000 	.word	0x40010000
 800349c:	40010400 	.word	0x40010400
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40001800 	.word	0x40001800

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4d0d      	ldr	r5, [pc, #52]	; (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2600      	movs	r6, #0
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4d0b      	ldr	r5, [pc, #44]	; (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	; (8003534 <__libc_init_array+0x44>)
 8003504:	f000 f820 	bl	8003548 <_init>
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2600      	movs	r6, #0
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08003578 	.word	0x08003578
 800352c:	08003578 	.word	0x08003578
 8003530:	08003578 	.word	0x08003578
 8003534:	0800357c 	.word	0x0800357c

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
